buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://dl.bintray.com/vrapio/vrapio"
        }
    }
}

plugins {
    // Here we define all plugins that are used by subprojects and specify the version for external ones

    id 'idea'

    id 'maven'
    id 'maven-publish'

    id 'java'
    id 'java-library' // needed to make sure that transitive deps have 'compile' scope

    id 'com.jfrog.bintray' version '1.8.3'

    id 'com.softeq.gradle.itest' version '1.0.4'

}

import java.text.SimpleDateFormat

def globalVersion = new Version(version)

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}

allprojects {
    description = "The e-commerce SDK from commercetools for Java"
}

tasks.register("writeVersionToReadme") {
    doLast {
        ant.replaceregexp(match: 'commercetools: \"[^\\s]+\"', replace: "commercetools: \"${globalVersion}\"", flags:'g', byline:true) {
            fileset(dir: projectDir, includes: 'README.md')
        }
        ant.replaceregexp(match: '<commercetools.version>.+</commercetools.version>', replace: "<commercetools.version>${globalVersion}</commercetools.version>", flags:'g', byline:true) {
            fileset(dir: projectDir, includes: 'README.md')
        }
    }
}

ext {
    versions = [
            slf4j: "1.7.21",
            logback: "1.1.7",
            findbugs: "3.0.2",
            jackson: "2.10.1",
            junit: "4.12",
            validation: "2.0.1.Final",
            assertJ: "3.8.0",
            gson: "2.8.6",
            awaitility: "4.0.2",
            failsafe: "2.4.0"
    ]

    commons = [
            lang3: 'org.apache.commons:commons-lang3:3.10',
            cli: 'commons-cli:commons-cli:1.4',
            io: 'commons-io:commons-io:2.6',

    ]

    scmProjectName = rootProject.name
    scmRepo = 'github.com'
    scmProjectPath = "commercetools/commercetools-sdk-java-v2.git"  // github relative path with .git extension
    scmProjectUrl = "https://$scmRepo/$scmProjectPath"      // just as web-page
    scmHttpsUrl = "https://$scmRepo/$scmProjectPath"        // common VCS read access
    scmSshUrl = "git@$scmRepo:$scmProjectPath"              // developers VCS read-write repo
    SNAPSHOT_SUFFIX = "-SNAPSHOT"
    versionWIP = "development$SNAPSHOT_SUFFIX"
}

// maven-specific publishing settings
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        connection "scm:git:$scmHttpsUrl"
        developerConnection "scm:git:$scmSshUrl"
        url "$scmProjectUrl"
    }
}

subprojects { project ->
    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'idea'

    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    apply plugin: 'java'
    apply plugin: 'java-library' // needed to make sure that transitive deps have 'compile' scope
    apply plugin: 'com.jfrog.bintray'

    apply plugin: 'com.softeq.gradle.itest'

    group='com.commercetools.sdk'

    version = globalVersion

    itestSourceSet {
        name = "integrationTest"
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath

        options {
            setMemberLevel JavadocMemberLevel.PUBLIC
            setAuthor false
            noTimestamp = true

            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }

    ext {
        buildInfoPath = "build/generated/src/main/java/io/vrap/rmf/base/client/"
        buildInfoPackage = "io.vrap.rmf.base.client"
    }

    if (project.file("build.gradle").exists()) {

        bintray {
            user = System.getenv('CTP_BINTRAY_USER')
            key = System.getenv('CTP_BINTRAY_KEY')
            publications = [ 'Maven' ]

            publish = true

            pkg {
                repo = 'maven'
                name = project.name
                desc = rootProject.description
                userOrg = 'commercetools'
                licenses = ['Apache-2.0']

                vcsUrl = scmHttpsUrl
                publicDownloadNumbers = true

                version {
                    gpg {
                        sign = true
                    }
                }
            }
        }

        publishing {
            publications {
                Maven(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    groupId group
                    artifactId project.name
                    version version

                    pom {
                        name = project.name
                        description = project.description
                        developers {
                            developer {
                                id = "jenschude"
                                name = "Jens Schulze"
                                email = "jens.schulze@commercetools.com"
                            }
                        }
                        url = scmHttpsUrl
                    }
                    pom.withXml {
                        def root = asNode()
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        task bintrayMavenSync(type: MavenCentralSync) {
            mustRunAfter bintrayPublish
            dryRun = System.getenv("MAVEN_SYNC") != "true"
            repo = 'maven'
            pkgName = project.name
            subject = 'commercetools'
            bintrayUser = System.getenv('CTP_BINTRAY_USER') ?: ''
            bintrayApiKey = System.getenv('CTP_BINTRAY_KEY') ?: ''
            ossUser = System.getenv('CTP_OSS_USER') ?: ''
            ossPassword = System.getenv('CTP_OSS_SECRET') ?: ''
            versionName = version.toString()
        }
    }

    sourceCompatibility = 1.8
}

def exportedProjects= [
        ":commercetools:commercetools-http-client",
        ":commercetools:commercetools-sdk-java-api",
        ":commercetools:commercetools-sdk-java-importapi",
        ":commercetools:commercetools-sdk-java-ml",
        ":rmf:rmf-java-base",
        ":rmf:okhttp-client3",
        ":rmf:okhttp-client4",
]
task alljavadoc(type: Javadoc) {
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
    options.noTimestamp = true
}

import com.jfrog.bintray.gradle.Utils
import com.jfrog.bintray.gradle.BintrayHttpClientFactory
import static groovyx.net.http.ContentType.JSON
import static groovyx.net.http.Method.POST

class MavenCentralSync extends DefaultTask {
    static final String TASK_NAME = "bintrayMavenSync"

    @Input
    Boolean dryRun = true

    @Input
    String repo

    @Input
    String pkgName

    @Input
    String subject

    @Input
    String versionName

    @Input
    String apiUrl = 'https://api.bintray.com'

    @Input
    String bintrayUser

    @Input
    String bintrayApiKey

    @Input
    String ossUser

    @Input
    String ossPassword

    @Input
    String ossCloseRepo = true


    @TaskAction
    void taskAction() throws IOException {
        mavenCentralSync()
    }


    private void mavenCentralSync() {
        def httpBuilder = BintrayHttpClientFactory.create(apiUrl, bintrayUser, bintrayApiKey)
        def pkgPath = "$subject/$repo/$pkgName"
        def mavenPackageExists = MavenPackageSearch.exists("com.commercetools.sdk", pkgName, versionName)
        if (mavenPackageExists) {
            println("Package already exists: $pkgPath")
            return
        }
        if (dryRun) {
            logger.info("(Dry run) Sync to Maven Central performed for '$pkgPath/$versionName'.")
            return
        }

        httpBuilder.request(POST, JSON) {
            Utils.addHeaders(headers)
            uri.path = "/maven_central_sync/$pkgPath/versions/$versionName"
            body = [username: ossUser, password: ossPassword]
            if (ossCloseRepo != null) {
                body << [close: ossCloseRepo]
            }
            response.success = { resp ->
                logger.info("Sync to Maven Central performed for '$pkgPath/$versionName'.")
            }
            response.failure = { resp, reader ->
                throw new GradleException("Could not sync '$pkgPath/$versionName' to Maven Central: $resp.statusLine $reader")
            }
        }
    }
}

import groovy.json.JsonSlurper

class MavenPackageSearch {
    static boolean exists(group, artifact, versionName) {

        String url = "https://search.maven.org/solrsearch/select?q=g:%22$group%22%20AND%20a:%22$artifact%22%20AND%20v:%22$versionName%22&rows=20&wt=json"
        def json = new JsonSlurper().parseText(url.toURL().text)

        return json.get('response')?.get('docs')?.getAt(0)?.get("v") == versionName
    }
}
